/*!
 * Virtual Select 1.0
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */(()=>{"use strict";var t={"./src/virtual-select.js":
/*!*******************************!*\
  !*** ./src/virtual-select.js ***!
  \*******************************/(t,e,i)=>{function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){if(t){if("string"==typeof t)return l(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function a(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{VirtualSelect:()=>c});var r={13:"onEnterPress",27:"onEscPress",38:"onUpArrowPress",40:"onDownArrowPress"},c=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);try{this.setProps(e),this.setDisabledOptions(e.disabledOptions),this.setOptions(e.options),this.render(),this.addEvents(),this.setMethods(),e.selectedValue&&this.setValueMethod(e.selectedValue,this.silentInitialValueSet)}catch(t){console.warn("Couldn't initiate Virtual Select"),console.error(t)}}var e,i,l;return e=t,l=[{key:"init",value:function(e){var i=e.ele;if(i){var o=!1;if("string"!=typeof i||(i=document.querySelector(i))){void 0===i.length&&(i=[i],o=!0);var s=[];return i.forEach((function(i){e.ele=i,s.push(new t(e))})),o?s[0]:s}}}},{key:"closeAllDropbox",value:function(t){document.querySelectorAll(".vscomp-wrapper").forEach((function(e){t&&t===e||e.parentElement.virtualSelect.closeDropbox()}))}},{key:"resetForm",value:function(t){var e=t.target.closest("form");e&&e.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.reset()}))}},{key:"reset",value:function(){this.virtualSelect.reset()}},{key:"setValueMethod",value:function(t,e){this.virtualSelect.setValueMethod(t,e)}},{key:"setOptionsMethod",value:function(t){this.virtualSelect.setOptionsMethod(t)}},{key:"setDisabledOptionsMethod",value:function(t){this.virtualSelect.setDisabledOptionsMethod(t)}},{key:"toggleSelectAll",value:function(t){this.virtualSelect.toggleAllOptions(t)}},{key:"isAllSelected",value:function(){return this.virtualSelect.isAllSelected}}],(i=[{key:"render",value:function(){if(this.$ele){var t="vscomp-wrapper closed",e=this.getTooltipAttrText("",!0),i=this.getTooltipAttrText("Clear"),o=this.getStyleText({"max-height":this.optionsHeight}),s={"z-index":this.zIndex};this.dropboxWidth&&(s.width=this.dropboxWidth),this.multiple&&(t+=" multiple"),"top"===this.position&&(t+=" position-top"),this.hideClearButton||(t+=" has-clear-button");var n='<div class="'.concat(t,'" tabindex="0">\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(e,">\n            ").concat(this.placeholder,'\n          </div>\n          <div class="vscomp-arrow"></div>\n          <div class="vscomp-clear-button toggle-button-child" ').concat(i,'>\n          </div>\n        </div>\n        <div class="vscomp-dropbox" ').concat(this.getStyleText(s),'>\n          <div class="vscomp-search-wrapper"></div>\n          <div class="vscomp-options-container" ').concat(o,'>\n            <div class="vscomp-options-list">\n              <div class="vscomp-options"></div>\n            </div>\n          </div>\n          <div class="vscomp-no-options">').concat(this.noOptionsText,'</div>\n          <div class="vscomp-no-search-results">').concat(this.noSearchResultsText,"</div>\n        </div>\n      </div>");this.$ele.innerHTML=n,this.$wrapper=this.$ele.querySelector(".vscomp-wrapper"),this.$toggleButton=this.$ele.querySelector(".vscomp-toggle-button"),this.$clearButton=this.$ele.querySelector(".vscomp-clear-button"),this.$dropbox=this.$ele.querySelector(".vscomp-dropbox"),this.$search=this.$ele.querySelector(".vscomp-search-wrapper"),this.$optionsContainer=this.$ele.querySelector(".vscomp-options-container"),this.$optionsList=this.$ele.querySelector(".vscomp-options-list"),this.$options=this.$ele.querySelector(".vscomp-options"),this.$valueText=this.$ele.querySelector(".vscomp-value"),this.addClass(this.$ele,"vscomp-ele"),this.renderSearch(),this.setOptionsHeight(),this.setVisibleOptions()}}},{key:"renderOptions",value:function(){var t=this,e="",i=this.getVisibleOptions(),o="",s="",n=this.getStyleText({height:this.optionHeight+"px"});if(this.multiple&&(o='<span class="checkbox-icon"></span>'),this.allowNewOption){var l=this.getTooltipAttrText("New Option");s='<span class="vscomp-new-option-icon" '.concat(l,"></span>")}i.forEach((function(i){var l=i.label,a="vscomp-option",r=t.getTooltipAttrText("",!0),c="";i.isSelected&&(a+=" selected"),i.isFocused&&(a+=" focused"),i.isDisabled&&(a+=" disabled"),i.isCurrentNew&&(a+=" current-new",c+=s),e+='<div class="'.concat(a,'" data-value="').concat(i.value,'" data-index="').concat(i.index,'" data-visible-index="').concat(i.visibleIndex,'" ').concat(n,">\n          ").concat(o,'\n          <span class="vscomp-option-text" ').concat(r,">\n            ").concat(l,"\n          </span>\n          ").concat(c,"\n        </div>")})),this.$options.innerHTML=e;var a=!this.options.length,r=!a&&!i.length;this.allowNewOption||this.toggleClass(this.$wrapper,"has-no-search-results",r),this.toggleClass(this.$wrapper,"has-no-options",a),this.setOptionsPosition(),this.setOptionsTooltip(),this.moveFocusedOptionToView()}},{key:"renderSearch",value:function(){if(this.hasSearch){var t="";this.multiple&&(t='<span class="checkbox-icon toggle-all-options"></span>');var e='<div class="vscomp-search-container">\n        '.concat(t,'\n        <input type="text" class="vscomp-search-input" placeholder="Search...">\n        <span class="vscomp-search-clear">&times;</span>\n      </div>');this.$search.innerHTML=e,this.$searchInput=this.$ele.querySelector(".vscomp-search-input"),this.$searchClear=this.$ele.querySelector(".vscomp-search-clear"),this.$toggleAllOptions=this.$ele.querySelector(".toggle-all-options"),this.addEvent(this.$searchInput,"keyup change","onSearch"),this.addEvent(this.$searchClear,"click","onSearchClear"),this.addEvent(this.$toggleAllOptions,"click","onToggleAllOptions")}}},{key:"addEvents",value:function(){this.addEvent(document,"click","onDocumentClick"),this.addEvent(this.$wrapper,"keydown","onKeyDown"),this.addEvent(this.$toggleButton,"click","onToggleButtonClick"),this.addEvent(this.$clearButton,"click","onClearButtonClick"),this.addEvent(this.$optionsContainer,"scroll","onOptionsScroll"),this.addEvent(this.$options,"click","onOptionsClick"),this.addEvent(this.$options,"mouseover","onOptionsMouseOver"),this.addEvent(this.$options,"touchmove","onOptionsTouchMove")}},{key:"addEvent",value:function(t,e,i){var o=this;t&&(e=this.removeArrayEmpty(e.split(" "))).forEach((function(e){var s="".concat(i,"-").concat(e),n=o.events[s];n||(n=o[i].bind(o),o.events[s]=n),(t=o.getElements(t)).forEach((function(t){t.addEventListener(e,n)}))}))}},{key:"dispatchEvent",value:function(t,e){t&&(t=this.getElements(t),setTimeout((function(){t.forEach((function(t){t.dispatchEvent(new Event(e,{bubbles:!0}))}))}),0))}},{key:"onDocumentClick",value:function(e){t.closeAllDropbox(e.target.closest(".vscomp-wrapper"))}},{key:"onKeyDown",value:function(t){var e=t.which||t.keyCode,i=r[e];i&&this[i](t)}},{key:"onEnterPress",value:function(){this.isOpened()?this.selectFocusedOption():this.openDropbox()}},{key:"onEscPress",value:function(){this.isOpened()&&this.closeDropbox()}},{key:"onDownArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("next"):this.openDropbox()}},{key:"onUpArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("previous"):this.openDropbox()}},{key:"onToggleButtonClick",value:function(t){t.target.closest(".toggle-button-child")||this.toggleDropbox()}},{key:"onClearButtonClick",value:function(){this.reset()}},{key:"onOptionsScroll",value:function(){this.setVisibleOptions()}},{key:"onOptionsClick",value:function(t){this.selectOption(t.target.closest(".vscomp-option:not(.disabled)"))}},{key:"onOptionsMouseOver",value:function(t){var e=t.target.closest(".vscomp-option:not(.disabled)");e&&this.focusOption(null,e)}},{key:"onOptionsTouchMove",value:function(){this.removeOptionFocus()}},{key:"onSearch",value:function(t){t.stopPropagation(),this.setSearchValue(t.target.value,!0)}},{key:"onSearchClear",value:function(){this.setSearchValue(""),this.focusSearchInput()}},{key:"onToggleAllOptions",value:function(){this.toggleAllOptions()}},{key:"setProps",value:function(t){t=this.setDefaultProps(t),this.setPropsFromElementAttr(t),this.$ele=t.ele,this.valueKey=t.valueKey,this.labelKey=t.labelKey,this.optionsCount=parseInt(t.optionsCount),this.halfOptionsCount=Math.ceil(this.optionsCount/2),this.optionHeightText=t.optionHeight,this.optionHeight=parseFloat(this.optionHeightText),this.multiple=this.convertToBoolean(t.multiple),this.hasSearch=this.convertToBoolean(t.search),this.hideClearButton=this.convertToBoolean(t.hideClearButton),this.silentInitialValueSet=this.convertToBoolean(t.silentInitialValueSet),this.allowNewOption=this.convertToBoolean(t.allowNewOption),this.markSearchResults=this.convertToBoolean(t.markSearchResults),this.noOptionsText=t.noOptionsText,this.noSearchResultsText=t.noSearchResultsText,this.placeholder=t.placeholder,this.position=t.position,this.dropboxWidth=t.dropboxWidth,this.noOfDisplayValues=parseInt(t.noOfDisplayValues),this.zIndex=parseInt(t.zIndex),this.selectedValues=[],this.events={},this.tooltipEnterDelay=200,this.transitionDuration=250,this.searchValue="",this.searchValueOriginal="",this.isAllSelected=!1,this.optionsHeight=this.optionsCount*this.optionHeight+"px",(void 0===t.search&&this.multiple||this.allowNewOption)&&(this.hasSearch=!0)}},{key:"setDefaultProps",value:function(t){return Object.assign({valueKey:"value",labelKey:"label",optionsCount:5,noOfDisplayValues:50,optionHeight:"40px",multiple:!1,hideClearButton:!1,silentInitialValueSet:!1,noOptionsText:"No options found",noSearchResultsText:"No results found",placeholder:"Select",position:"auto",zIndex:1,allowNewOption:!1,markSearchResults:!1},t)}},{key:"setPropsFromElementAttr",value:function(t){var e=t.ele,i={multiple:"multiple",placeholder:"placeholder","data-label-key":"labelKey","data-value-key":"valueKey","data-search":"search","data-hide-clear-button":"hideClearButton","data-options-count":"optionsCount","data-option-height":"optionHeight","data-position":"position","data-no-options-text":"noOptionsText","data-no-search-results-text":"noSearchResultsText","data-silent-initial-value-set":"silentInitialValueSet","data-dropbox-width":"dropboxWidth","data-z-index":"zIndex","data-no-of-display-values":"noOfDisplayValues","data-allow-new-option":"allowNewOption","data-mark-search-results":"markSearchResults"};for(var o in i){var s=e.getAttribute(o);"multiple"!==o||""!==s&&"true"!==s||(s=!0),s&&(t[i[o]]=s)}}},{key:"setMethods",value:function(){var e=this.$ele;e.virtualSelect=this,e.value=this.multiple?[]:"",e.reset=t.reset,e.setValue=t.setValueMethod,e.setOptions=t.setOptionsMethod,e.setDisabledOptions=t.setDisabledOptionsMethod,e.toggleSelectAll=t.toggleSelectAll,e.isAllSelected=t.isAllSelected}},{key:"setValueMethod",value:function(t,e){Array.isArray(t)||(t=[t]),t=t.map((function(t){return t||0==t?t.toString():""}));var i=[];this.options.forEach((function(e){-1===t.indexOf(e.value)||e.isDisabled?e.isSelected=!1:(e.isSelected=!0,i.push(e.value))})),this.multiple||(i=i[0]),this.setValue(i,!e),this.afterValueSet()}},{key:"setOptionsMethod",value:function(t){this.setOptions(t),this.setOptionsHeight(),this.setVisibleOptions(),this.reset()}},{key:"setDisabledOptionsMethod",value:function(t){this.setDisabledOptions(t,!0),this.setValueMethod(null),this.setVisibleOptions()}},{key:"setDisabledOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=t.map((function(t){return t.toString()})),this.disabledOptions=t,e&&t.length&&this.options.forEach((function(e){return e.isDisabled=-1!==t.indexOf(e.value),e}))}},{key:"setOptions",value:function(t){t||(t=[]);var e=this.disabledOptions,i=e.length,o=this.valueKey,s=this.labelKey;this.visibleOptionsCount=t.length,this.options=t.map((function(t,n){var l=(t[o]||"").toString(),a={index:n,value:l,label:t[s]||"",isVisible:!0};return i&&(a.isDisabled=-1!==e.indexOf(l)),a})),this.lastOptionIndex=this.options.length-1}},{key:"setVisibleOptions",value:function(){var t=s(this.options),e=2*this.optionsCount,i=this.getVisibleStartIndex(),o=this.getNewOption(),n=i+e-1,l=0;o&&(o.visibleIndex=l,l++),t=t.filter((function(t){var e=!1;return t.isVisible&&!t.isCurrentNew&&(e=l>=i&&l<=n,t.visibleIndex=l,l++),e})),o&&(t=[o].concat(s(t))),this.visibleOptions=t,this.renderOptions()}},{key:"setOptionsPosition",value:function(t){void 0===t&&(t=this.getVisibleStartIndex());var e=t*this.optionHeight;this.$options.style.transform="translate3d(0, ".concat(e,"px, 0)"),this.setData(this.$options,"top",e)}},{key:"setOptionsTooltip",value:function(){var t=this;this.getVisibleOptions().forEach((function(e){var i=t.$dropbox.querySelector('.vscomp-option[data-index="'.concat(e.index,'"] .vscomp-option-text'));t.setData(i,"tooltip",e.label)}))}},{key:"setValue",value:function(t,e){t?Array.isArray(t)?this.selectedValues=s(t):this.selectedValues=[t]:this.selectedValues=[],this.$ele.value=this.multiple?this.selectedValues:this.selectedValues[0]||"",this.setValueText(),this.toggleClass(this.$wrapper,"has-value",this.isNotEmpty(this.selectedValues)),e&&this.dispatchEvent(this.$ele,"change")}},{key:"setValueText",value:function(){var t,e=[],i=[],o=this.selectedValues,s=this.noOfDisplayValues,l=0,a=function(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=n(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,s=function(){};return{s,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,a=!0,r=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){r=!0,l=t},f:function(){try{a||null==i.return||i.return()}finally{if(r)throw l}}}}(this.options);try{for(a.s();!(t=a.n()).done;){var r=t.value;if(!r.isCurrentNew){if(l>50)break;var c=r.value;if(-1!==o.indexOf(c)){var u=r.label;e.push(u),++l<=s&&i.push('<span class="vscomp-value-tag">'.concat(u,"</span>"))}}}}catch(t){a.e(t)}finally{a.f()}var h=o.length-s;h>0&&i.push('<span class="vscomp-value-tag">+ '.concat(h," more...</span>")),this.$valueText.innerHTML=e.join(", ")||this.placeholder,this.setData(this.$valueText,"tooltip",i.join(", "))}},{key:"setSearchValue",value:function(t,e){if(t!==this.searchValueOriginal){e||(this.$searchInput.value=t);var i=this.markSearchResults,o=t.toLowerCase().trim(),s=0,n=!1;this.searchValue=o,this.searchValueOriginal=t,this.options.forEach((function(t){if(!t.isCurrentNew){i&&(t.label=t.label.replace(/<\/*mark>/g,""));var e=t.label.toString().toLowerCase(),l=-1!==e.indexOf(o);t.isVisible=l,l&&(s++,i&&(t.label=t.label.replace(new RegExp("(".concat(o,")"),"gi"),"<mark>$1</mark>"))),n||(n=e===o)}})),this.visibleOptionsCount=s,this.allowNewOption&&(t&&!n?(this.setNewOption(),this.visibleOptionsCount++):this.removeNewOption()),this.toggleClass(this.$wrapper,"has-search-value",t),this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions()}}},{key:"setOptionProp",value:function(t,e,i){this.options[t]&&(this.options[t][e]=i)}},{key:"setOptionsHeight",value:function(){this.$optionsList.style.height=this.optionHeight*this.visibleOptionsCount+"px"}},{key:"setDropboxPosition",value:function(){if("auto"===this.position){var t=this.getMoreVisibleSides(this.$wrapper),e=!1;if(this.dropboxWidth){var i=this.$toggleButton.getBoundingClientRect(),o=window.innerWidth,s=parseFloat(this.dropboxWidth),n=i.left+s>o,l=s>i.right;n&&!l&&(e=!0)}this.toggleClass(this.$wrapper,"position-top","top"===t.vertical),this.toggleClass(this.$wrapper,"position-left",e)}}},{key:"setNewOption",value:function(){var t=this.searchValueOriginal.trim();if(t){var e=this.getNewOption();if(e){var i=e.index;this.setOptionProp(i,"value",t),this.setOptionProp(i,"label",t)}else{var o={value:t,label:t,isCurrentNew:!0};this.addOption(this.getOptionObj(o))}}}},{key:"getVisibleOptions",value:function(){return this.visibleOptions||[]}},{key:"getValue",value:function(){return this.multiple?this.selectedValues:this.selectedValues[0]}},{key:"getFirstVisibleOptionIndex",value:function(){return Math.ceil(this.$optionsContainer.scrollTop/this.optionHeight)}},{key:"getVisibleStartIndex",value:function(){var t=this.getFirstVisibleOptionIndex()-this.halfOptionsCount;return t<0&&(t=0),t}},{key:"getTooltipAttrText",value:function(t,e){var i={"data-tooltip":t||"","data-tooltip-enter-delay":this.tooltipEnterDelay,"data-tooltip-z-index":this.zIndex,"data-tooltip-ellipsis-only":e||!1};return this.getAttributesText(i)}},{key:"getOptionObj",value:function(t){if(t)return{index:t.index,isCurrentNew:t.isCurrentNew||!1,value:t.value,label:t.label}}},{key:"getNewOption",value:function(){var t=this.options[this.lastOptionIndex];if(t&&t.isCurrentNew)return t}},{key:"getOptionIndex",value:function(t){var e;return t&&this.options.some((function(i){if(i.value==t)return e=i.index,!0})),e}},{key:"openDropbox",value:function(t){var e=this;this.setDropboxPosition(),this.removeClass(this.$wrapper,"closed"),setTimeout((function(){e.addClass(e.$wrapper,"opened"),t||(e.addClass(e.$wrapper,"focused"),e.focusSearchInput())}),0)}},{key:"closeDropbox",value:function(t){var e=this,i=t?0:this.transitionDuration;setTimeout((function(){e.removeClass(e.$wrapper,"opened focused"),e.removeOptionFocus()}),0),setTimeout((function(){e.addClass(e.$wrapper,"closed")}),i)}},{key:"toggleDropbox",value:function(){this.isOpened()?this.closeDropbox():this.openDropbox()}},{key:"isOpened",value:function(){return this.hasClass(this.$wrapper,"opened")}},{key:"focusSearchInput",value:function(){var t=this.$searchInput;t&&t.focus()}},{key:"focusOption",value:function(t,e){var i,o=this.$dropbox.querySelector(".vscomp-option.focused");if(e)i=e;else if(o)i=this.getSibling(o,t);else{var s=this.getFirstVisibleOptionIndex();i=this.$dropbox.querySelector('.vscomp-option[data-visible-index="'.concat(s,'"]')),this.hasClass(i,"disabled")&&(i=this.getSibling(i,"next"))}i&&i!==o&&(o&&this.removeClass(o,"focused"),this.addClass(i,"focused"),this.toggleFocusedProp(this.getData(i,"index"),!0),this.moveFocusedOptionToView(i))}},{key:"moveFocusedOptionToView",value:function(t){if(t||(t=this.$dropbox.querySelector(".vscomp-option.focused")),t){var e,i=this.$optionsContainer.getBoundingClientRect(),o=t.getBoundingClientRect(),s=i.top,n=i.bottom,l=i.height,a=o.top,r=o.bottom,c=o.height,u=t.offsetTop,h=this.getData(this.$options,"top","number");s>a?e=u+h:n<r&&(e=u-l+c+h),void 0!==e&&(this.$optionsContainer.scrollTop=e)}}},{key:"removeOptionFocus",value:function(){var t=this.$dropbox.querySelector(".vscomp-option.focused");t&&(this.removeClass(t,"focused"),this.toggleFocusedProp(null))}},{key:"selectOption",value:function(t){if(t){var e=!this.hasClass(t,"selected");if(e||this.multiple){var i=this.selectedValues,o=this.getData(t,"value"),s=this.getData(t,"index");if(this.toggleSelectedProp(s,e),e){if(this.multiple)i.push(o),this.toggleAllOptionsClass();else{i.length&&this.toggleSelectedProp(this.getOptionIndex(i[0]),!1),i=[o];var n=this.$ele.querySelector(".vscomp-option.selected");n&&this.toggleClass(n,"selected",!1),this.closeDropbox()}this.toggleClass(t,"selected")}else this.multiple&&(this.toggleClass(t,"selected"),this.removeItemFromArray(i,o),this.toggleAllOptionsClass(!1));this.hasClass(t,"current-new")&&this.beforeSelectNewValue(),this.setValue(i,!0)}else this.closeDropbox()}}},{key:"selectFocusedOption",value:function(){this.selectOption(this.$dropbox.querySelector(".vscomp-option.focused"))}},{key:"toggleAllOptions",value:function(t){if(this.multiple){"boolean"!=typeof t&&(t=!this.hasClass(this.$toggleAllOptions,"checked"));var e=[];this.options.forEach((function(i){i.isDisabled||i.isCurrentNew||(i.isSelected=t,t&&e.push(i.value))})),this.setValue(e,!0),this.toggleAllOptionsClass(t),this.renderOptions()}}},{key:"toggleAllOptionsClass",value:function(t){"boolean"!=typeof t&&(t=!1,this.options.length&&(t=!this.options.some((function(t){return!t.isSelected&&!t.isDisabled})))),this.toggleClass(this.$toggleAllOptions,"checked",t),this.isAllSelected=t}},{key:"toggleFocusedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.focusedOptionIndex&&this.setOptionProp(this.focusedOptionIndex,"isFocused",!1),this.setOptionProp(t,"isFocused",e),this.focusedOptionIndex=t}},{key:"toggleSelectedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.setOptionProp(t,"isSelected",e)}},{key:"scrollToTop",value:function(){var t=!this.isOpened();t&&this.openDropbox(!0),this.$optionsContainer.scrollTop>0&&(this.$optionsContainer.scrollTop=0),t&&this.closeDropbox(!0)}},{key:"reset",value:function(){this.options.forEach((function(t){t.isSelected=!1})),this.setValue(null,!0),this.afterValueSet(!0)}},{key:"afterValueSet",value:function(t){this.scrollToTop(),this.toggleAllOptionsClass(!t&&void 0),this.setSearchValue(""),this.renderOptions()}},{key:"addOption",value:function(t){t&&(this.lastOptionIndex++,t.index=this.lastOptionIndex,this.options.push(this.getOptionObj(t)))}},{key:"removeOption",value:function(t){(t||0==t)&&(this.options.splice(t,1),this.lastOptionIndex--)}},{key:"removeNewOption",value:function(){var t=this.getNewOption();t&&this.removeOption(t.index)}},{key:"beforeSelectNewValue",value:function(){var t=this,e=this.getNewOption().index;this.setOptionProp(e,"isCurrentNew",!1),this.setOptionProp(e,"isNew",!0),setTimeout((function(){t.setSearchValue(""),t.focusSearchInput()}),0)}},{key:"addClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).add.apply(i,s(e))})))}},{key:"removeClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).remove.apply(i,s(e))})))}},{key:"toggleClass",value:function(t,e,i){var o;if(t)return void 0!==i&&(i=Boolean(i)),this.getElements(t).forEach((function(t){o=t.classList.toggle(e,i)})),o}},{key:"hasClass",value:function(t,e){return!!t&&t.classList.contains(e)}},{key:"isEmpty",value:function(t){var e=!1;return t?Array.isArray(t)?0===t.length&&(e=!0):"object"===o(t)&&0===Object.keys(t).length&&(e=!0):e=!0,e}},{key:"isNotEmpty",value:function(t){return!this.isEmpty(t)}},{key:"setData",value:function(t,e,i){t&&(t.dataset[e]=i)}},{key:"getStyleText",value:function(t,e){var i="";for(var o in t)i+="".concat(o,": ").concat(t[o],";");return i&&!e&&(i='style="'.concat(i,'"')),i}},{key:"getElements",value:function(t){if(t)return void 0===t.length&&(t=[t]),t}},{key:"getData",value:function(t,e,i){if(t){var o=t?t.dataset[e]:"";return"number"===i?o=parseFloat(o)||0:"true"===o?o=!0:"false"===o&&(o=!1),o}}},{key:"removeItemFromArray",value:function(t,e,i){if(!Array.isArray(t)||!t.length||!e)return t;i&&(t=s(t));var o=t.indexOf(e);return-1!==o&&t.splice(o,1),t}},{key:"removeArrayEmpty",value:function(t){return Array.isArray(t)&&t.length?t.filter((function(t){return!!t})):[]}},{key:"getMoreVisibleSides",value:function(t){if(!t)return{};var e=t.getBoundingClientRect(),i=window.innerWidth,o=window.innerHeight,s=e.left,n=e.top;return{horizontal:s>i-s-e.width?"left":"right",vertical:n>o-n-e.height?"top":"bottom"}}},{key:"getSibling",value:function(t,e){var i="next"===e?"nextElementSibling":"previousElementSibling";do{t&&(t=t[i])}while(this.hasClass(t,"disabled"));return t}},{key:"getAttributesText",value:function(t){var e="";if(!t)return e;for(var i in t)e+=" ".concat(i,'="').concat(t[i],'" ');return e}},{key:"convertToBoolean",value:function(t){return!0===t||"true"===t}}])&&a(e.prototype,i),l&&a(e,l),t}();document.addEventListener("reset",c.resetForm),window.VirtualSelect=c}},e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o](s,s.exports,i),s.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i("./src/virtual-select.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,